% microalgae_figs.m

% Diana LaScala-Gruenewald
% 7/9/15
% R2014a

% Creates figures for microalgae paper.

clear
clc

%% LOAD DATA

drive = 'C:\Users\Diana\Documents\work\Stanford\Microalgae\Data\'; % Ender

filename1 = [drive 'Averaged_Photoquad_Data_MATLAB.csv'];
filename2 = [drive 'Averaged_by_groups_MATLAB.csv'];
filename3 = [drive 'Environmental_Data.csv'];
filename4 = [drive 'MDS_groups.txt'];
filename5 = [drive 'MDS_morphotypes.txt'];
filename6 = [drive '2014_summer_CN_ratios_from_Bracken_with_treats.csv'];

treatment_bio_data = load(filename1);
group_bio_data = load(filename2);
enviro_data = load(filename3);
mds_groups = load(filename4);
mds_morpho = load(filename5);

% load filename6:

% Auto-generated by MATLAB on 2016/04/19 09:38:13

% Initialize variables.
filename = 'C:\Users\Diana\Documents\work\Stanford\Microalgae\Data\2014_summer_CN_ratios_from_Bracken_with_treats.csv';
delimiter = '\t';
startRow = 2;

% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

% Open the text file.
fileID = fopen(filename,'r');

% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

% Close the text file.
fclose(fileID);

% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,7,8,9,11,12,14,15,16]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using date
% format string.
try
    dates{10} = datetime(dataArray{10}, 'Format', 'MM/dd/yyyy', 'InputFormat', 'MM/dd/yyyy');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{10} = cellfun(@(x) x(2:end-1), dataArray{10}, 'UniformOutput', false);
        dates{10} = datetime(dataArray{10}, 'Format', 'MM/dd/yyyy', 'InputFormat', 'MM/dd/yyyy');
    catch
        dates{10} = repmat(datetime([NaN NaN NaN]), size(dataArray{10}));
    end
end

anyBlankDates = cellfun(@isempty, dataArray{10});
anyInvalidDates = isnan(dates{10}.Hour) - anyBlankDates;
dates = dates(:,10);

% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,7,8,9,11,12,14,15,16]);
rawCellColumns = raw(:, [4,5,6,13]);


% Create output variable
CNratios = table;
CNratios.PlateNum = cell2mat(rawNumericColumns(:, 1));
CNratios.Plate = cell2mat(rawNumericColumns(:, 2));
CNratios.Site = cell2mat(rawNumericColumns(:, 3));
CNratios.ShoreLevel = rawCellColumns(:, 1);
CNratios.TempTreat = rawCellColumns(:, 2);
CNratios.LimpetTreat = rawCellColumns(:, 3);
CNratios.Density = cell2mat(rawNumericColumns(:, 4));
CNratios.Triplet = cell2mat(rawNumericColumns(:, 5));
CNratios.limpetspresent = cell2mat(rawNumericColumns(:, 6));
CNratios.ProcessingDate = dates{:, 1};
CNratios.Nitrogen = cell2mat(rawNumericColumns(:, 7));
CNratios.Carbon = cell2mat(rawNumericColumns(:, 8));
CNratios.quality = rawCellColumns(:, 4);
CNratios.CNratio = cell2mat(rawNumericColumns(:, 9));
CNratios.avdailymax = cell2mat(rawNumericColumns(:, 10));
CNratios.Fo = cell2mat(rawNumericColumns(:, 11));

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% CNratios.ProcessingDate=datenum(CNratios.ProcessingDate);

% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me dates blankDates anyBlankDates invalidDates anyInvalidDates rawNumericColumns rawCellColumns;

%% TEMPERATURE COMPARISON (NOT A FIGURE)

treatment = {'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', ...
    'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D'};
site = {'1', '1', '1', '1', '2', '2', '2', '2', '3', '3', '3', '3', ...
    '4', '4', '4', '4', '5', '5', '5', '5', '6', '6', '6', '6'};

% ANOVA test
[p, t, stats] = anovan(enviro_data(:,4), {treatment, site}); 

% Compare betweeen treatments (no sig diff)
multcompare(stats)

% Compare between sites (site 6 sig higher)
multcompare(stats, 'Dimension', [2])

% No interaction possible due to replication??

% Now let's specify site as a random factor (rather than a fixed factor):
[p, t, stats] = anovan(enviro_data(:,4), {treatment, site}, ...
    'model', 2, 'random', 2);

% Specifying site as a random factor rather than a fixed one and requesting
% an interaction term (model = 2) does not change the ANOVA table.  It just
% shows us that we cannot compute an interaction term due to the lack of
% replication in our experimental design.

% Let's use our plates as replicates (n=4), and do a single factor ANOVA
% with site:

[p, t, stats] = anova1(enviro_data(:,4), site)

% F_5,18 = 21.67, p < 0.001 (Site 6 significantly warmer)

%% F0 COMPARISON (FIG 2)

treatment = {'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', ...
    'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D'};

% means = [117.5 55.17 49.36 61.06];
% errors = [22.23 8.36 6.88 7.56];

% ANOVA test
[p, t, stats] = anovan(enviro_data(:,2), {treatment, site});

% Compare between treatments (A - ungrazed - is sig higher)
multcompare(stats)

% Compare between sites (no sig diff)
figure()
multcompare(stats, 'Dimension', [2])

% No interaction possible due to replication?? (But might be possible if I
% had the raw 6 measurements per plate??)

% Figure code:

A = [enviro_data([1 2 4 3], 2)';
    enviro_data([5 6 8 7], 2)';
    enviro_data([9 10 12 11], 2)';
    enviro_data([13 14 16 15], 2)';
    enviro_data([17 18 20 19], 2)';
    enviro_data([21 22 24 23], 2)'];

% create figure and plot data
h4 = figure();
box on
notBoxPlot(A)
ylabel('F_0', 'FontSize', 12)

% adjust axes and tick labels
axis([0 5 20 200])
ax = gca;
set(ax, 'XTickLabel', {'Ungrazed', 'Community-grazed', ['\it L. austrodigitalis\rm' '-grazed'], ...
    ['\it L. scabra\rm' '-grazed']})
rotateXLabels(ax, 45, 'FontSize', 8)

% add lines
line([1.8,4.2], [95,95], 'Color', 'k')
line([0.8, 1.2], [180,180], 'Color', 'k')

% save figure at high resolution
% print(h4, 'C:\Users\Diana\Documents\work\Stanford\Microalgae\Paper\Figures\Fig4 20160317', ...
%     '-dtiffn', '-r600')

% Now, we're going to exculde site 6 from the analysis because it is so
% much warmer than the other sites.  Arguably, the three primary
% contributors to F0 are tidal height, temperature and grazing.  Tidal
% height is controlled for by experimental design, and we're trying to
% control for temperature by removing site 6.  Then we're trying to simply
% test how grazing treatment affects F0.  

% Also, let's include site as a random factor.

treatment = {'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', ...
    'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D'};
site = {'1', '1', '1', '1', '2', '2', '2', '2', '3', '3', '3', '3', ...
    '4', '4', '4', '4', '5', '5', '5', '5'};

% means = [137.967 59.40 55.833 62.00]; (without site 6)
% errors = [10.6153 8.829 2.855 9.187];

% ANOVA test
[p, t, stats] = anovan(enviro_data(1:20,2), {treatment, site}, ...
    'model', 2, 'random', 2);

% Compare between treatments (A - ungrazed - is sig higher)
multcompare(stats)

% Compare between sites (no sig diff)
figure()
multcompare(stats, 'Dimension', [2])

% No interaction possible due to unreplicated block design. 

% Figure code:

A = [enviro_data([1 2 4 3], 2)';
    enviro_data([5 6 8 7], 2)';
    enviro_data([9 10 12 11], 2)';
    enviro_data([13 14 16 15], 2)';
    enviro_data([17 18 20 19], 2)'];

% create figure and plot data
h4 = figure();
box on
notBoxPlot(A)
ylabel('F_0', 'FontSize', 12)

% adjust axes and tick labels
axis([0 5 20 200])
ax = gca;
set(ax, 'XTickLabel', {'Ungrazed', 'Community-grazed', ['\it L. austrodigitalis\rm' '-grazed'], ...
    ['\it L. scabra\rm' '-grazed']})
rotateXLabels(ax, 45, 'FontSize', 8)

% add lines
line([1.8,4.2], [95,95], 'Color', 'k')
line([0.8, 1.2], [180,180], 'Color', 'k')

%% INTERACTION PLOT FOR F0

% Here we're going to argue that excluding site 6, ungrazed plates
% definitely have higher F0 than grazed ones, and there is no interaction.
% While significant interactions may be occuring between the grazed plates,
% the differences in absolute values are small and hover around the "no
% food" threshold, suggesting that such significant interactions would
% likely be biologically insignificant.

fA = enviro_data([1 5 9 13 17],2);
fB = enviro_data([2 6 10 14 18],2);
fC = enviro_data([3 7 11 15 19],2);
fD = enviro_data([4 8 12 16 20],2);

site_num = [1 2 3 4 5];

h = figure();
hold on
box on
plot(site_num, fA, 'k')
plot(site_num, fB, 'k--')
plot(site_num, fC, 'k:')
plot(site_num, fD, 'k-.')
axis([1 5 0 220])

% add labels
xlabel('Site Number', 'FontSize', 12)
ylabel('F_0', 'FontSize', 12)

% legend
h_legend = legend({'Ungrazed', 'Natural-grazed', ['\it L. scabra\rm' '-grazed'], ...
    ['\it L. austrodigitalis\rm' '-grazed']}, 'Position', [0.635, 0.765, 0.25, 0.1]);
set(h_legend, 'FontSize', 10)

% fix tick marks and axes
set(gca, 'XTick', [1 2 3 4 5])

%% ORGANISM-LEVEL ASSEMBLAGE DATA (FIG 4)

h2 = figure(1)
set(h2, 'Position', [230 200 1000 700])

hold on
scatter(mds_groups([1 5 9 13 17 21],1), mds_groups([1 5 9 13 17 21],2), 60, ...
    'ko', 'MarkerFaceColor', 'k')
scatter(mds_groups([2 6 10 14 18 22],1), mds_groups([2 6 10 14 18 22],2), 60, ...
    'ks', 'MarkerFaceColor', [0.396 0.396 0.396])
scatter(mds_groups([3 7 11 15 19 23],1), mds_groups([3 7 11 15 19 23],2), 60, ...
    'kd', 'MarkerFaceColor', [0.756 0.756 0.756])
scatter(mds_groups([4 8 12 16 20 24],1), mds_groups([4 8 12 16 20 24],2), 60, ...
    'kp', 'MarkerFaceColor', [0.92 0.92 0.92])
axis([-3 1.7 -1.2 1.5])
axis off
h_legend = legend({'Ungrazed', 'Natural-grazed', ['\it L. scabra\rm' '-grazed'], ...
    ['\it L. austrodigitalis\rm' '-grazed']}, 'Position', [0.635, 0.765, 0.25, 0.1]);
set(h_legend, 'FontSize', 10) 

% ellipse(2.0, 0.9, 0.3, -0.9, 0.05, 'k') 
% ellipse(1.3, 1.0, 3.1, 0.05, 0, [0.6,0.6,0.6])

% draw bounding rectangle
rectangle('Position', [-2.9, -1.1, 4.6, 2.5])

% save figure at high resolution
% print(h2, 'C:\Users\Diana\Documents\work\Stanford\Microalgae\Paper\Figures\Fig2 20160317', ...
%     '-dtiffn', '-r600')

%% MORPHOTYPE LEVEL ASSEMBLAGE DATA (FIG 5)

h3 = figure(1)
set(h3, 'Position', [230 200 1000 700])

rotated = zeros(length(mds_morpho),2);
angle = 90;
rotated(:,1) = mds_morpho(:,1)*cos(angle) - mds_morpho(:,2)*sin(angle);
rotated(:,2) = mds_morpho(:,2)*cos(angle) + mds_morpho(:,1)*sin(angle);

hold on
scatter(rotated([1 5 9 13 17 21],1), rotated([1 5 9 13 17 21],2), 60, ...
    'ko', 'MarkerFaceColor', 'k')
scatter(rotated([2 6 10 14 18 22],1), rotated([2 6 10 14 18 22],2), 60, ...
    'ks', 'MarkerFaceColor', [0.396 0.396 0.396])
scatter(rotated([3 7 11 15 19 23],1), rotated([3 7 11 15 19 23],2), 60, ...
    'kd', 'MarkerFaceColor', [0.756 0.756 0.756])
scatter(rotated([4 8 12 16 20 24],1), rotated([4 8 12 16 20 24],2), 60, ...
    'kp', 'MarkerFaceColor', [0.92 0.92 0.92])
axis([-2.5 2 -1.6 1.5])
axis off
h_legend = legend({'Ungrazed', 'Natural-grazed', ['\it L. scabra\rm' '-grazed'], ...
    ['\it L. austrodigitalis\rm' '-grazed']}, 'Position', [0.17, 0.175, 0.25, 0.1]);
set(h_legend, 'FontSize', 10)

% draw ellipses
% ellipse(1.3, 0.7, 0.3, -0.1, 0.6, 'k') 
% ellipse(1.5, 0.8, 2.4, 0.2, -0.2, [0.6 0.6 0.6])

% draw bounding rectangle
rectangle('Position', [-2.4, -1.5, 4.3, 2.9]) 

% save figure at high resolution
% print(h3, 'C:\Users\Diana\Documents\work\Stanford\Microalgae\Paper\Figures\Fig3 20160317', ...
%     '-dtiffn', '-r600')

%% INTERACTION BETWEEN TEMP AND F0 (FIG 3)

treatment = {'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', ...
    'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D'};

xdata = enviro_data(:,4); % temp data
ydata = enviro_data(:,2); % F0 data

% ANCOVA
[h, atab, ctab, stats] = aoctool(xdata, ydata, treatment, 0.05);

% without site 6:

treatment = {'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', ...
    'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D'};

xdata = enviro_data(1:20,4); % temp data
ydata = enviro_data(1:20,2); % F0 data

% ANCOVA
[h, atab, ctab, stats] = aoctool(xdata, ydata, treatment, 0.05);

% Compare slopes (A sig diff)
figure()
multcompare(stats, 'ctype', 'hsd') % calculates Tukey's test

% Here I've looked at interactions between temp and F0 and ignored site...

% Figure code:

F0_A = [enviro_data(1,2) enviro_data(5,2) enviro_data(9,2) ...
    enviro_data(13,2) enviro_data(17,2) enviro_data(21,2)];
F0_other = [enviro_data(2,2) enviro_data(3,2) enviro_data(4,2) ...
    enviro_data(6,2) enviro_data(7,2) enviro_data(8,2)...
    enviro_data(10,2) enviro_data(11,2) enviro_data(12,2) ...
    enviro_data(14,2) enviro_data(15,2) enviro_data(16,2) ...
    enviro_data(18,2) enviro_data(19,2) enviro_data(20,2) ...
    enviro_data(22,2) enviro_data(23,2) enviro_data(24,2)];

T_A = [enviro_data(1,4) enviro_data(5,4) enviro_data(9,4) ...
    enviro_data(13,4) enviro_data(17,4) enviro_data(21,4)];
T_other = [enviro_data(2,4) enviro_data(3,4) enviro_data(4,4) ...
    enviro_data(6,4) enviro_data(7,4) enviro_data(8,4)...
    enviro_data(10,4) enviro_data(11,4) enviro_data(12,4) ...
    enviro_data(14,4) enviro_data(15,4) enviro_data(16,4) ...
    enviro_data(18,4) enviro_data(19,4) enviro_data(20,4) ...
    enviro_data(22,4) enviro_data(23,4) enviro_data(24,4)];

% data for best fit lines
xs = [13:0.25:22];
ys_A = -40.325.*xs + 693.81;
ys_other = -4.7041.*xs + 124.85;

% create figure and plot data
h5 = figure();
box on
hold on
p1 = scatter(T_A, F0_A, 'MarkerEdgeColor', 'k', 'MarkerFaceColor', 'w')
plot(xs, ys_A, 'k--')
p2 = scatter(T_other, F0_other, 'MarkerEdgeColor', 'k', 'MarkerFaceColor', 'k')
plot(xs, ys_other, 'k')
ylabel('F_0', 'FontSize', 12)
xlabel('Average Maximum Daily Temperature [C]', 'FontSize', 12)
axis([13 22 0 180])
legend([p1,p2], 'Ungrazed', 'Grazed')

% save figure at high resolution
% print(h5, 'C:\Users\Diana\Documents\work\Stanford\Microalgae\Paper\Figures\Fig5 20160317', ...
%     '-dtiffn', '-r600')

% Let's re-do this figure with site as different symbols:

F0_A1 = [enviro_data(1,2)];
F0_A2 = [enviro_data(5,2)];
F0_A3 = [enviro_data(9,2)];
F0_A4 = [enviro_data(13,2)];
F0_A5 = [enviro_data(17,2)];
F0_A6 = [enviro_data(21,2)];

F0_other1 = [enviro_data(2,2) enviro_data(3,2) enviro_data(4,2)];
F0_other2 = [enviro_data(6,2) enviro_data(7,2) enviro_data(8,2)];
F0_other3 = [enviro_data(10,2) enviro_data(11,2) enviro_data(12,2)];
F0_other4 = [enviro_data(14,2) enviro_data(15,2) enviro_data(16,2)];
F0_other5 = [enviro_data(18,2) enviro_data(19,2) enviro_data(20,2)];
F0_other6 = [enviro_data(22,2) enviro_data(23,2) enviro_data(24,2)];

T_A1 = [enviro_data(1,4)];
T_A2 = [enviro_data(5,4)];
T_A3 = [enviro_data(9,4)];
T_A4 = [enviro_data(13,4)];
T_A5 = [enviro_data(17,4)];
T_A6 = [enviro_data(21,4)];

T_other1 = [enviro_data(2,4) enviro_data(3,4) enviro_data(4,4)];
T_other2 = [enviro_data(6,4) enviro_data(7,4) enviro_data(8,4)];
T_other3 = [enviro_data(10,4) enviro_data(11,4) enviro_data(12,4)];
T_other4 = [enviro_data(14,4) enviro_data(15,4) enviro_data(16,4)];
T_other5 = [enviro_data(18,4) enviro_data(19,4) enviro_data(20,4)];
T_other6 = [enviro_data(22,4) enviro_data(23,4) enviro_data(24,4)];

% create figure and plot data
h5 = figure();
box on
hold on
p1 = scatter(T_A1, F0_A1, 'o', 'MarkerEdgeColor', 'k', 'MarkerFaceColor', 'w')
p2 = scatter(T_A2, F0_A2, 's', 'MarkerEdgeColor', 'k', 'MarkerFaceColor', 'w')
p3 = scatter(T_A3, F0_A3, 'd', 'MarkerEdgeColor', 'k', 'MarkerFaceColor', 'w')
p4 = scatter(T_A4, F0_A4, '^', 'MarkerEdgeColor', 'k', 'MarkerFaceColor', 'w')
p5 = scatter(T_A5, F0_A5, 'v', 'MarkerEdgeColor', 'k', 'MarkerFaceColor', 'w')
p6 = scatter(T_A6, F0_A6, 'p', 'MarkerEdgeColor', 'k', 'MarkerFaceColor', 'w')
plot(xs, ys_A, 'k--')
p7 = scatter(T_other1, F0_other1, 'o', 'MarkerEdgeColor', 'k', 'MarkerFaceColor', 'k')
p8 = scatter(T_other2, F0_other2, 's', 'MarkerEdgeColor', 'k', 'MarkerFaceColor', 'k')
p9 = scatter(T_other3, F0_other3, 'd', 'MarkerEdgeColor', 'k', 'MarkerFaceColor', 'k')
p10 = scatter(T_other4, F0_other4, '^', 'MarkerEdgeColor', 'k', 'MarkerFaceColor', 'k')
p11 = scatter(T_other5, F0_other5, 'v', 'MarkerEdgeColor', 'k', 'MarkerFaceColor', 'k')
p12 = scatter(T_other6, F0_other6, 'p', 'MarkerEdgeColor', 'k', 'MarkerFaceColor', 'k')
plot(xs, ys_other, 'k')
ylabel('F_0', 'FontSize', 12)
xlabel('Average Maximum Daily Temperature [C]', 'FontSize', 12)
axis([13 22 0 180])
legend([p7,p8,p9,p10,p11,p12], 'Site 1', 'Site 2', 'Site 3', 'Site 4', ...
    'Site 5', 'Site 6')



%% FIGURE 6A

% % get data together:
% no_limpets = [treatment_bio_data(1, [6,9,10,14,15,16]);
% treatment_bio_data(5, [6,9,10,14,15,16]); treatment_bio_data(9, [6,9,10,14,15,16]);
% treatment_bio_data(13, [6,9,10,14,15,16]); treatment_bio_data(17, [6,9,10,14,15,16]);
% treatment_bio_data(21, [6,9,10,14,15,16])]; % data for specific morphotypes on ungrazed plates
% 
% two_limpets = [treatment_bio_data(8, [6,9,10,14,15,16])];
% % data for plates grazed by only 2 limpets
% 
% three_limpets = [treatment_bio_data(4, [6,9,10,14,15,16]);
% treatment_bio_data(16, [6,9,10,14,15,16]); treatment_bio_data(20, [6,9,10,14,15,16])];
% % grazed by three limpets
% 
% four_limpets = [treatment_bio_data(3, [6,9,10,14,15,16]);
% treatment_bio_data(7, [6,9,10,14,15,16]); treatment_bio_data(11, [6,9,10,14,15,16]);
% treatment_bio_data(12, [6,9,10,14,15,16]); treatment_bio_data(15, [6,9,10,14,15,16]);
% treatment_bio_data(19, [6,9,10,14,15,16]); treatment_bio_data(23, [6,9,10,14,15,16]);
% treatment_bio_data(24, [6,9,10,14,15,16])];
% % grazed by four limpets
% 
% av_no_limpets = mean(no_limpets);
% std_no_limpets = std(no_limpets);
% av_three_limpets = mean(three_limpets);
% std_three_limpets = std(three_limpets);
% av_four_limpets = mean(four_limpets);
% std_four_limpets = std(four_limpets);
% 
% x = [1:4];
% y = [av_no_limpets; two_limpets; av_three_limpets; av_four_limpets;];
% err = [std_no_limpets; [0 0 0 0 0 0]; std_three_limpets; std_four_limpets];
% 
% % create figure
% h4 = figure(1)
% set(h4, 'Position', [230 200 1000 700])
% 
% b = bar(x,y) % create bar graph
% hold on
% xlabel('Number of Limpet Grazers', 'FontSize', 12)
% ylabel('Average Percent Cover', 'FontSize', 12)
% 
% % add error bars
% errorbar(0.67, av_no_limpets(1), zeros(size(av_no_limpets(1))), std_no_limpets(1), 'k')
% errorbar(0.8, av_no_limpets(2), zeros(size(av_no_limpets(2))), std_no_limpets(2), 'k')
% errorbar(0.935, av_no_limpets(3), zeros(size(av_no_limpets(3))), std_no_limpets(3), 'k')
% errorbar(1.07, av_no_limpets(4), zeros(size(av_no_limpets(4))), std_no_limpets(4), 'k')
% errorbar(1.2, av_no_limpets(5), zeros(size(av_no_limpets(5))), std_no_limpets(5), 'k')
% errorbar(1.34, av_no_limpets(6), zeros(size(av_no_limpets(6))), std_no_limpets(6), 'k')
% 
% errorbar(2.67, av_three_limpets(1), zeros(size(av_three_limpets(1))), std_three_limpets(1), 'k')
% errorbar(2.8, av_three_limpets(2), zeros(size(av_three_limpets(2))), std_three_limpets(2), 'k')
% errorbar(2.935, av_three_limpets(3), zeros(size(av_three_limpets(3))), std_three_limpets(3), 'k')
% errorbar(3.07, av_three_limpets(4), zeros(size(av_three_limpets(4))), std_three_limpets(4), 'k')
% errorbar(3.2, av_three_limpets(5), zeros(size(av_three_limpets(5))), std_three_limpets(5), 'k')
% errorbar(3.34, av_three_limpets(6), zeros(size(av_three_limpets(6))), std_three_limpets(6), 'k')
% 
% errorbar(3.67, av_four_limpets(1), zeros(size(av_four_limpets(1))), std_four_limpets(1), 'k')
% errorbar(3.8, av_four_limpets(2), zeros(size(av_four_limpets(2))), std_four_limpets(2), 'k')
% errorbar(3.935, av_four_limpets(3), zeros(size(av_four_limpets(3))), std_four_limpets(3), 'k')
% errorbar(4.07, av_four_limpets(4), zeros(size(av_four_limpets(4))), std_four_limpets(4), 'k')
% errorbar(4.2, av_four_limpets(5), zeros(size(av_four_limpets(5))), std_four_limpets(5), 'k')
% errorbar(4.34, av_four_limpets(6), zeros(size(av_four_limpets(6))), std_four_limpets(6), 'k')
% 
% % set axes
% axis([0.5 4.5 0 95])
% 
% % set bar colors
% set(b(1), 'FaceColor', 'k')
% set(b(2), 'FaceColor', [0.328,0.328,0.328])
% set(b(3), 'FaceColor', [0.6,0.6,0.6])
% set(b(4), 'FaceColor', [0.816, 0.816, 0.816])
% set(b(5), 'FaceColor', [0.96, 0.96, 0.96])
% set(b(6), 'FaceColor', [1,1,1])
% 
% % add legend
% legend('5 - Filamentous Cyanobacteria', '8 - Diatom', '9 - Diatom', ...
%     '13 - Encrusting', '14 - Encrusting', '15 - Coccoidal Cyanobacteria', ...
%     'Location', 'NorthEast')
% 
% % save figure at high resolution
% print(h4, 'C:\Users\Diana\Documents\work\Stanford\Microalgae\Paper\Figures\Fig5a 20151028', ...
%     '-dtiffn', '-r600')

%% LIMPET DENSITY DATA (FIG 7)

limpets = {'0', '4', '3', '0', '4', '2', '0', '4', '4', '0', '4', '3', ...
    '0', '4', '3', '0', '4', '4'};
treatments = {'A', 'C', 'D', 'A', 'C', 'D', 'A', 'C', 'D', 'A', 'C', ...
    'D', 'A', 'C', 'D', 'A', 'C', 'D'};
sites = {'1', '1', '1', '2', '2', '2', '3', '3', '3', '4', '4', '4', ...
    '5', '5', '5', '6', '6', '6'};

% ANOVA test (Morphotype 5 - no sig diff)
[p, t, stats] = anovan(treatment_bio_data([1 3 4 5 7 8 9 11 12 13 15 16 17 19 20 21 23 24],6), ...
    {limpets, treatments, sites});

% ANOVA test (Morphotype 8 - no sig diff)
[p, t, stats] = anovan(treatment_bio_data([1 3 4 5 7 8 9 11 12 13 15 16 17 19 20 21 23 24],9), ...
    {limpets, treatments, sites});

% ANOVA test (Morphotype 9 - no sig diff)
[p, t, stats] = anovan(treatment_bio_data([1 3 4 5 7 8 9 11 12 13 15 16 17 19 20 21 23 24],10), ...
    {limpets, treatments, sites});

% ANOVA test (Morphotype 13 - no sig diff)
[p, t, stats] = anovan(treatment_bio_data([1 3 4 5 7 8 9 11 12 13 15 16 17 19 20 21 23 24],14), ...
    {limpets, treatments, sites});

% ANOVA test (Morphotype 14 - no sig diff)
[p, t, stats] = anovan(treatment_bio_data([1 3 4 5 7 8 9 11 12 13 15 16 17 19 20 21 23 24],15), ...
    {limpets, treatments, sites});

% ANOVA test (Morphotype 15 - treatment only sig)
[p, t, stats] = anovan(treatment_bio_data([1 3 4 5 7 8 9 11 12 13 15 16 17 19 20 21 23 24],16), ...
    {limpets, treatments, sites});

% Compare treaments
figure()
multcompare(stats, 'Dimension', [1])

% These come out differently when only limpets are included, as was done in
% the paper.  As you can see, there is no replication within sites, and
% while 0 and 4 limpets are replicated across sites and treatments, that is
% not the case with 3 and 2 limpets.

% Figure code:

% assemble data
M5 = [treatment_bio_data([1 8 4 3], 6)';
    treatment_bio_data(5,6) NaN treatment_bio_data([16 7], 6)';
    treatment_bio_data(9,6) NaN treatment_bio_data([20 11], 6)';
    treatment_bio_data(13,6) NaN NaN treatment_bio_data(12,6);
    treatment_bio_data(17,6) NaN NaN treatment_bio_data(15,6);
    treatment_bio_data(21,6) NaN NaN treatment_bio_data(19,6);
    NaN NaN NaN treatment_bio_data(23,6);
    NaN NaN NaN treatment_bio_data(14,6)];

M8 = [treatment_bio_data([1 8 4 3], 9)';
    treatment_bio_data(5,9) NaN treatment_bio_data([16 7], 9)';
    treatment_bio_data(9,9) NaN treatment_bio_data([20 11], 9)';
    treatment_bio_data(13,9) NaN NaN treatment_bio_data(12,9);
    treatment_bio_data(17,9) NaN NaN treatment_bio_data(15,9);
    treatment_bio_data(21,9) NaN NaN treatment_bio_data(19,9);
    NaN NaN NaN treatment_bio_data(23,9);
    NaN NaN NaN treatment_bio_data(14,9)];

M9 = [treatment_bio_data([1 8 4 3], 10)';
    treatment_bio_data(5,10) NaN treatment_bio_data([16 7], 10)';
    treatment_bio_data(9,10) NaN treatment_bio_data([20 11], 10)';
    treatment_bio_data(13,10) NaN NaN treatment_bio_data(12,10);
    treatment_bio_data(17,10) NaN NaN treatment_bio_data(15,10);
    treatment_bio_data(21,10) NaN NaN treatment_bio_data(19,10);
    NaN NaN NaN treatment_bio_data(23,10);
    NaN NaN NaN treatment_bio_data(14,10)];  

M13 = [treatment_bio_data([1 8 4 3], 14)';
    treatment_bio_data(5,14) NaN treatment_bio_data([16 7], 14)';
    treatment_bio_data(9,14) NaN treatment_bio_data([20 11], 14)';
    treatment_bio_data(13,14) NaN NaN treatment_bio_data(12,14);
    treatment_bio_data(17,14) NaN NaN treatment_bio_data(15,14);
    treatment_bio_data(21,14) NaN NaN treatment_bio_data(19,14);
    NaN NaN NaN treatment_bio_data(23,14);
    NaN NaN NaN treatment_bio_data(14,14)];  

M14 = [treatment_bio_data([1 8 4 3], 15)';
    treatment_bio_data(5,15) NaN treatment_bio_data([16 7], 15)';
    treatment_bio_data(9,15) NaN treatment_bio_data([20 11], 15)';
    treatment_bio_data(13,15) NaN NaN treatment_bio_data(12,15);
    treatment_bio_data(17,15) NaN NaN treatment_bio_data(15,15);
    treatment_bio_data(21,15) NaN NaN treatment_bio_data(19,15);
    NaN NaN NaN treatment_bio_data(23,15);
    NaN NaN NaN treatment_bio_data(14,15)];

M15 = [treatment_bio_data([1 8 4 3], 16)';
    treatment_bio_data(5,16) NaN treatment_bio_data([16 7], 16)';
    treatment_bio_data(9,16) NaN treatment_bio_data([20 11], 16)';
    treatment_bio_data(13,16) NaN NaN treatment_bio_data(12,16);
    treatment_bio_data(17,16) NaN NaN treatment_bio_data(15,16);
    treatment_bio_data(21,16) NaN NaN treatment_bio_data(19,16);
    NaN NaN NaN treatment_bio_data(23,16);
    NaN NaN NaN treatment_bio_data(14,16)];

% create figure
h6 = figure()
set(h6, 'Position', [230 200 1000 700])

subplot(2,3,1)
notBoxPlot(M5)
title('Morphotype 5')
ax = gca;
set(ax, 'XTickLabel', {'0', '2', '3', '4'})
ylabel('Percent Cover')
xlabel('Number of Limpets')
text(0.2,2,'p = 0.26')

subplot(2,3,2)
notBoxPlot(M8)
title('Morphotype 8')
axis([0 5 -2 5])
ax = gca;
set(ax, 'XTickLabel', {'0', '2', '3', '4'})
xlabel('Number of Limpets')
ylabel('Percent Cover')
text(0.2,-1.5,'p = 0.19')

subplot(2,3,3)
notBoxPlot(M9)
title('Morphotype 9')
axis([0 5 -5 15])
ax = gca;
set(ax, 'XTickLabel', {'0', '2', '3', '4'})
xlabel('Number of Limpets')
ylabel('Percent Cover')
text(0.2,-3.5,'p = 0.13')

subplot(2,3,4)
notBoxPlot(M13)
title('Morphotype 13')
axis([0 5 20 80])
ax = gca;
set(ax, 'XTickLabel', {'0', '2', '3', '4'})
xlabel('Number of Limpets')
ylabel('Percent Cover')
text(0.2,24,'p = 0.23')

subplot(2,3,5)
notBoxPlot(M14)
title('Morphotype 14')
axis([0 5 -15 70])
ax = gca;
set(ax, 'XTickLabel', {'0', '2', '3', '4'})
xlabel('Number of Limpets')
ylabel('Percent Cover')
text(0.2,-10,'p = 0.01')
text(0.9, 14, 'a')
text(1.75, 27, 'ab')
text(2.8, 62, 'ab')
text(3.9, 65, 'b')

subplot(2,3,6)
notBoxPlot(M15)
title('Morphotype 15')
axis([0 5 -3 25])
ax = gca;
set(ax, 'XTickLabel', {'0', '2', '3', '4'})
xlabel('Number of Limpets')
ylabel('Percent Cover')
text(0.2,-1.5,'p = 0.006')
text(0.9, 7.2, 'a')
text(1.75, 14.2, 'ab')
text(2.9, 22, 'b')
text(3.9, 8.5, 'a')

% save figure at high resolution
% print(h6, 'C:\Users\Diana\Documents\work\Stanford\Microalgae\Paper\Figures\Fig6 20160317', ...
%     '-dtiffn', '-r600')

%% C:N RATIO DATA (FIG 6)

cn = log(CNratios.CNratio(:));
f = CNratios.Fo(:);
groups = {'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', ...
    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', ...
    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', ...
    'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', ...
    'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', ...
    'C', 'C', 'C', 'C', 'C', 'C', 'D', 'D', 'D', 'D', 'D', 'D', 'D', ...
    'D', 'D'};

% anova and tukey's test:
[a,b,stats] = anovan(cn, {f,groups}, 'continuous', [1], 'sstype', 3);
b
multcompare(stats)

% Here, I believe Luke found that site was not a significant factor, so
% we're only looking at the relevant factors: F0 and groups.  The actual
% figure only shows differences in C:N ratios by groups.

B = zeros(34,4);
B(1:34,1) = log(CNratios.CNratio(1:34));
B(1:24,2) = log(CNratios.CNratio(35:58));
B(1:10,4) = log(CNratios.CNratio(59:68));
B(1:9,3) = log(CNratios.CNratio(69:end));
B(25:end,2) = NaN;
B(11:end,4) = NaN;
B(10:end,3) = NaN;


h7 = figure()
notBoxPlot(B)
box on
ylabel('log(C:N ratio)', 'FontSize', 12);
ax = gca;
set(ax, 'XTickLabel', {'Ungrazed', 'Natural-grazed', ['\it L. austrodigitalis\rm' '-grazed'], ...
    ['\it L. scabra\rm' '-grazed']})
axis([0 5 1.8 4])
rotateXLabels(ax, 45)

% add lines and stars
line([0.8 3.2], [3.1 3.1], 'Color', 'k')
line([2.8 4.3], [3.65 3.65], 'Color', 'k')

% save figure at high resolution
% print(h7, 'C:\Users\Diana\Documents\work\Stanford\Microalgae\Paper\Figures\Fig7 20160317', ...
%     '-dtiffn', '-r600')
